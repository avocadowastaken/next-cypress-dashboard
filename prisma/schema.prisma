generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["createMany"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  name  String?
  image String?

  email         String?   @unique
  emailVerified DateTime?

  projects Project[]
  accounts UserAccount[]
  sessions UserSession[]
}

model UserAccount {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  compoundId String @unique

  providerId        String
  providerType      String
  providerAccountId String

  accessToken        String?
  refreshToken       String?
  accessTokenExpires DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, providerId])
  @@unique([userId, providerId, providerAccountId])
}

model UserSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  expires      DateTime
  accessToken  String   @unique
  sessionToken String   @unique
}

model UserVerificationRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  expires    DateTime
  identifier String
  token      String   @unique
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  org        String
  repo       String
  providerId String

  secrets ProjectSecrets?

  runs  Run[]
  users User[]

  @@unique([org, repo, providerId])
}

model ProjectSecrets {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  recordKey String @default(cuid())

  projectId String  @unique
  project   Project @relation(fields: [projectId], references: [id])
}

enum OS {
  unknown
  darwin
  linux
  windows
}

enum Browser {
  unknown
  chrome
  chromium
  edge
  electron
  firefox
}

model Run {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  groupId   String
  ciBuildId String
  machineId String @default(cuid())

  commitSha         String @default("")
  commitBranch      String @default("")
  commitMessage     String @default("")
  commitAuthorName  String @default("")
  commitAuthorEmail String @default("")

  os        OS     @default(unknown)
  osVersion String @default("")

  browser        Browser @default(unknown)
  browserVersion String  @default("")

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  instances RunInstance[]

  @@unique([groupId, ciBuildId, projectId])
}

model RunInstance {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  spec    String
  groupId String

  error        Json?
  claimedAt    DateTime?
  completedAt  DateTime?
  totalPassed  Int       @default(0)
  totalFailed  Int       @default(0)
  totalPending Int       @default(0)
  totalSkipped Int       @default(0)

  runId String
  run   Run    @relation(fields: [runId], references: [id])

  testResults TestResult[]

  @@unique([spec, runId, groupId])
  @@index([id, claimedAt])
  @@index([runId, groupId, claimedAt])
}

enum TestResultState {
  passed
  failed
}

model TestResult {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  state        TestResultState
  testId       String
  titleParts   String[]
  displayError Json?

  runInstanceId String
  runInstance   RunInstance @relation(fields: [runInstanceId], references: [id])

  @@unique([testId, runInstanceId])
}
